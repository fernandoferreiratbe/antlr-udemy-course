# Generated from Bazilio.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,209,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,
        1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,
        11,5,11,114,8,11,10,11,12,11,117,9,11,1,12,1,12,3,12,121,8,12,1,
        13,1,13,5,13,125,8,13,10,13,12,13,128,9,13,1,14,3,14,131,8,14,1,
        14,4,14,134,8,14,11,14,12,14,135,1,15,1,15,1,15,1,15,5,15,142,8,
        15,10,15,12,15,145,9,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,
        1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,
        1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,
        1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,
        1,34,1,34,5,34,196,8,34,10,34,12,34,199,9,34,1,34,1,34,1,35,4,35,
        204,8,35,11,35,12,35,205,1,35,1,35,0,0,36,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,1,0,8,1,0,65,90,
        4,0,48,57,65,90,95,95,97,122,1,0,65,71,1,0,48,57,2,0,65,90,97,122,
        2,0,34,34,92,92,2,0,10,10,13,13,3,0,9,10,13,13,32,32,217,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        1,73,1,0,0,0,3,77,1,0,0,0,5,81,1,0,0,0,7,84,1,0,0,0,9,89,1,0,0,0,
        11,95,1,0,0,0,13,97,1,0,0,0,15,99,1,0,0,0,17,102,1,0,0,0,19,105,
        1,0,0,0,21,109,1,0,0,0,23,111,1,0,0,0,25,118,1,0,0,0,27,122,1,0,
        0,0,29,130,1,0,0,0,31,137,1,0,0,0,33,148,1,0,0,0,35,151,1,0,0,0,
        37,153,1,0,0,0,39,155,1,0,0,0,41,157,1,0,0,0,43,159,1,0,0,0,45,161,
        1,0,0,0,47,163,1,0,0,0,49,166,1,0,0,0,51,168,1,0,0,0,53,170,1,0,
        0,0,55,173,1,0,0,0,57,176,1,0,0,0,59,179,1,0,0,0,61,182,1,0,0,0,
        63,184,1,0,0,0,65,186,1,0,0,0,67,188,1,0,0,0,69,190,1,0,0,0,71,203,
        1,0,0,0,73,74,5,60,0,0,74,75,5,63,0,0,75,76,5,62,0,0,76,2,1,0,0,
        0,77,78,5,60,0,0,78,79,5,119,0,0,79,80,5,62,0,0,80,4,1,0,0,0,81,
        82,5,105,0,0,82,83,5,102,0,0,83,6,1,0,0,0,84,85,5,101,0,0,85,86,
        5,108,0,0,86,87,5,115,0,0,87,88,5,101,0,0,88,8,1,0,0,0,89,90,5,119,
        0,0,90,91,5,104,0,0,91,92,5,105,0,0,92,93,5,108,0,0,93,94,5,101,
        0,0,94,10,1,0,0,0,95,96,5,123,0,0,96,12,1,0,0,0,97,98,5,125,0,0,
        98,14,1,0,0,0,99,100,5,56,0,0,100,101,5,60,0,0,101,16,1,0,0,0,102,
        103,5,60,0,0,103,104,5,60,0,0,104,18,1,0,0,0,105,106,5,40,0,0,106,
        107,5,58,0,0,107,108,5,41,0,0,108,20,1,0,0,0,109,110,5,35,0,0,110,
        22,1,0,0,0,111,115,7,0,0,0,112,114,7,1,0,0,113,112,1,0,0,0,114,117,
        1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,24,1,0,0,0,117,115,1,
        0,0,0,118,120,7,2,0,0,119,121,7,3,0,0,120,119,1,0,0,0,120,121,1,
        0,0,0,121,26,1,0,0,0,122,126,7,4,0,0,123,125,7,1,0,0,124,123,1,0,
        0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,28,1,0,0,
        0,128,126,1,0,0,0,129,131,5,45,0,0,130,129,1,0,0,0,130,131,1,0,0,
        0,131,133,1,0,0,0,132,134,7,3,0,0,133,132,1,0,0,0,134,135,1,0,0,
        0,135,133,1,0,0,0,135,136,1,0,0,0,136,30,1,0,0,0,137,143,5,34,0,
        0,138,139,5,92,0,0,139,142,9,0,0,0,140,142,8,5,0,0,141,138,1,0,0,
        0,141,140,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,
        0,144,146,1,0,0,0,145,143,1,0,0,0,146,147,5,34,0,0,147,32,1,0,0,
        0,148,149,5,60,0,0,149,150,5,45,0,0,150,34,1,0,0,0,151,152,5,42,
        0,0,152,36,1,0,0,0,153,154,5,47,0,0,154,38,1,0,0,0,155,156,5,37,
        0,0,156,40,1,0,0,0,157,158,5,43,0,0,158,42,1,0,0,0,159,160,5,45,
        0,0,160,44,1,0,0,0,161,162,5,61,0,0,162,46,1,0,0,0,163,164,5,47,
        0,0,164,165,5,61,0,0,165,48,1,0,0,0,166,167,5,62,0,0,167,50,1,0,
        0,0,168,169,5,60,0,0,169,52,1,0,0,0,170,171,5,62,0,0,171,172,5,61,
        0,0,172,54,1,0,0,0,173,174,5,60,0,0,174,175,5,61,0,0,175,56,1,0,
        0,0,176,177,5,124,0,0,177,178,5,58,0,0,178,58,1,0,0,0,179,180,5,
        58,0,0,180,181,5,124,0,0,181,60,1,0,0,0,182,183,5,91,0,0,183,62,
        1,0,0,0,184,185,5,93,0,0,185,64,1,0,0,0,186,187,5,40,0,0,187,66,
        1,0,0,0,188,189,5,41,0,0,189,68,1,0,0,0,190,191,5,35,0,0,191,192,
        5,35,0,0,192,193,5,35,0,0,193,197,1,0,0,0,194,196,8,6,0,0,195,194,
        1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,200,
        1,0,0,0,199,197,1,0,0,0,200,201,6,34,0,0,201,70,1,0,0,0,202,204,
        7,7,0,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,
        1,0,0,0,206,207,1,0,0,0,207,208,6,35,0,0,208,72,1,0,0,0,10,0,115,
        120,126,130,135,141,143,197,205,1,6,0,0
    ]

class BazilioLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    CUTTING = 8
    ADDING = 9
    REPRDO = 10
    SIZE = 11
    PROCNAME = 12
    NOTE = 13
    VAR = 14
    NUM = 15
    STRING = 16
    ASSIGN = 17
    MUL = 18
    DIV = 19
    MOD = 20
    SUM = 21
    SUB = 22
    EQ = 23
    NEQ = 24
    GT = 25
    LT = 26
    GET = 27
    LET = 28
    START_BLOCK = 29
    END_BLOCK = 30
    LEFT_BRACKET = 31
    RIGHT_BRACKET = 32
    LEFT_PARANTHESES = 33
    RIGHT_PARANTHESES = 34
    COMMENT = 35
    WS = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<?>'", "'<w>'", "'if'", "'else'", "'while'", "'{'", "'}'", 
            "'8<'", "'<<'", "'(:)'", "'#'", "'<-'", "'*'", "'/'", "'%'", 
            "'+'", "'-'", "'='", "'/='", "'>'", "'<'", "'>='", "'<='", "'|:'", 
            "':|'", "'['", "']'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "CUTTING", "ADDING", "REPRDO", "SIZE", "PROCNAME", "NOTE", "VAR", 
            "NUM", "STRING", "ASSIGN", "MUL", "DIV", "MOD", "SUM", "SUB", 
            "EQ", "NEQ", "GT", "LT", "GET", "LET", "START_BLOCK", "END_BLOCK", 
            "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_PARANTHESES", "RIGHT_PARANTHESES", 
            "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "CUTTING", "ADDING", "REPRDO", "SIZE", "PROCNAME", "NOTE", 
                  "VAR", "NUM", "STRING", "ASSIGN", "MUL", "DIV", "MOD", 
                  "SUM", "SUB", "EQ", "NEQ", "GT", "LT", "GET", "LET", "START_BLOCK", 
                  "END_BLOCK", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_PARANTHESES", 
                  "RIGHT_PARANTHESES", "COMMENT", "WS" ]

    grammarFileName = "Bazilio.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


